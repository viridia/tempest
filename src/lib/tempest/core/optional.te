/** Represents a value which may be present or absent. */
type Optional[T] = T | void;

/** Extend optional with useful methods. */
extend Optional[T] implements Iterable[T] {
  /** Returns 1 or 0 depending on whether the value is present or absent. */
  fn size: int {
    match self {
      T => 1;
      void => 0;
    }
  }

  /** Returns true or false depending on whether the value is absent or present. */
  fn empty: int {
    match self {
      T => false;
      void => true;
    }
  }
}
